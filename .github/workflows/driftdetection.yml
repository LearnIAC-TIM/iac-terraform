name: Infrastructure Drift Detection

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:        # Allow manual trigger
  
jobs:
  detect_drift:
    runs-on: ubuntu-22.04
    environment: production # Use GitHub environments for better secret management
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      WORKING_DIR: ./course materials/module10/drift-detection
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }} 
        
      - name: Create Reports Directory
        working-directory: ${{ env.WORKING_DIR }}
        run: mkdir -p reports
      
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.WORKING_DIR }} 
        continue-on-error: true
      
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -no-color -out=tfplan 2>&1 | tee plan_output.txt
          echo "EXITCODE=${PIPESTATUS[0]}" >> $GITHUB_OUTPUT
          
          # Save the drift details if there are changes
          if [ ${PIPESTATUS[0]} -eq 2 ]; then
            echo "DRIFT=true" >> $GITHUB_OUTPUT
            grep -A 1000 "Terraform will perform the following actions" plan_output.txt > drift_details.txt
          fi
        working-directory: ${{ env.WORKING_DIR }} 
      
      - name: Process Drift Results
        if: steps.plan.outputs.EXITCODE == '2'
        id: drift
        run: |
          echo "Drift detected! Processing results..."
          
          # Create a formatted message
          echo "Infrastructure Drift Report" > drift_report.md
          echo "=========================" >> drift_report.md
          echo "" >> drift_report.md
          echo "Detected on: $(date)" >> drift_report.md
          echo "" >> drift_report.md
          echo "Changes detected:" >> drift_report.md
          echo '```' >> drift_report.md
          cat drift_details.txt >> drift_report.md
          echo '```' >> drift_report.md
          
          # Save the report content for other steps
          cat drift_report.md > $GITHUB_STEP_SUMMARY
      
      - name: Create Issue
        if: steps.plan.outputs.EXITCODE == '2'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const driftReport = fs.readFileSync('drift_report.md', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Infrastructure Drift Detected',
              body: driftReport + `
              
              ## Action Required
              1. Review the detected changes
              2. If changes are approved:
                 - Update Terraform configuration to match
                 - Create a pull request with changes
              3. If changes are not approved:
                 - Investigate unauthorized changes
                 - Plan remediation
              
              ## Links
              - [Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - [Azure Portal](https://portal.azure.com)
              `
            });
          
      - name: Save Drift Report
        if: steps.plan.outputs.EXITCODE == '2'
        uses: actions/upload-artifact@v3
        with:
          name: drift-report-${{ github.run_id }}
          path: |
            drift_report.md
            plan_output.txt
          retention-days: 90
