#!/bin/bash
# Setup script for Azure Terraform Workshop
# Dette scriptet hjelper deg med √• sette opp prosjektet f√∏rste gang

set -e  # Exit on error

echo "========================================"
echo "Azure Terraform Workshop - Setup"
echo "========================================"
echo ""

# Farger for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to print colored messages
print_success() {
    echo -e "${GREEN}‚úì $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö† $1${NC}"
}

print_error() {
    echo -e "${RED}‚úó $1${NC}"
}

# Sjekk at vi er i riktig directory
if [ ! -f "README.md" ]; then
    print_error "M√• kj√∏res fra root directory av prosjektet!"
    exit 1
fi

echo "Steg 1: Sjekker forutsetninger..."
echo ""

# Sjekk at Azure CLI er installert
if ! command -v az &> /dev/null; then
    print_error "Azure CLI er ikke installert!"
    echo "Installer fra: https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
    exit 1
fi
print_success "Azure CLI er installert"

# Sjekk at Terraform er installert
if ! command -v terraform &> /dev/null; then
    print_error "Terraform er ikke installert!"
    echo "Installer fra: https://www.terraform.io/downloads"
    exit 1
fi
print_success "Terraform er installert ($(terraform version | head -n1))"

# Sjekk at bruker er logget inn i Azure
if ! az account show &> /dev/null; then
    print_warning "Du er ikke logget inn i Azure"
    echo "Logger inn..."
    az login
fi
print_success "Logget inn i Azure"

# Hent subscription info
SUBSCRIPTION_NAME=$(az account show --query name -o tsv)
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
echo ""
echo "Aktiv subscription:"
echo "  Navn: $SUBSCRIPTION_NAME"
echo "  ID: $SUBSCRIPTION_ID"
echo ""

# Sp√∏r om dette er riktig subscription
read -p "Er dette riktig subscription? (y/n) " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Bytt subscription med: az account set --subscription <subscription-id>"
    exit 1
fi

echo ""
echo "Steg 2: Samler informasjon om eksisterende ressurser..."
echo ""

# Sp√∏r om Resource Group navn
read -p "Skriv inn navnet p√• din eksisterende Resource Group: " RG_NAME
if [ -z "$RG_NAME" ]; then
    print_error "Resource Group navn kan ikke v√¶re tomt!"
    exit 1
fi

# Verifiser at Resource Group eksisterer
if ! az group show --name "$RG_NAME" &> /dev/null; then
    print_error "Resource Group '$RG_NAME' finnes ikke!"
    exit 1
fi
print_success "Resource Group '$RG_NAME' funnet"

# Hent location fra Resource Group
LOCATION=$(az group show --name "$RG_NAME" --query location -o tsv)
echo "Location: $LOCATION"

# Sp√∏r om Storage Account navn
read -p "Skriv inn navnet p√• din Storage Account (for Terraform state): " STORAGE_NAME
if [ -z "$STORAGE_NAME" ]; then
    print_error "Storage Account navn kan ikke v√¶re tomt!"
    exit 1
fi

# Verifiser at Storage Account eksisterer
if ! az storage account show --name "$STORAGE_NAME" --resource-group "$RG_NAME" &> /dev/null; then
    print_error "Storage Account '$STORAGE_NAME' finnes ikke!"
    exit 1
fi
print_success "Storage Account '$STORAGE_NAME' funnet"

# Sp√∏r om Container navn
read -p "Skriv inn navnet p√• Storage Container (for Terraform state): " CONTAINER_NAME
if [ -z "$CONTAINER_NAME" ]; then
    print_error "Container navn kan ikke v√¶re tomt!"
    exit 1
fi

# Sp√∏r om Key Vault navn
read -p "Skriv inn navnet p√• din Key Vault: " KV_NAME
if [ -z "$KV_NAME" ]; then
    print_error "Key Vault navn kan ikke v√¶re tomt!"
    exit 1
fi

# Verifiser at Key Vault eksisterer
if ! az keyvault show --name "$KV_NAME" --resource-group "$RG_NAME" &> /dev/null; then
    print_error "Key Vault '$KV_NAME' finnes ikke!"
    exit 1
fi
print_success "Key Vault '$KV_NAME' funnet"

# Sp√∏r om prosjektnavn
read -p "Velg et unikt prosjektnavn (3-12 tegn, lowercase): " PROJECT_NAME
if [ -z "$PROJECT_NAME" ]; then
    print_error "Prosjektnavn kan ikke v√¶re tomt!"
    exit 1
fi

# Sp√∏r om database passord
read -s -p "Velg et sterkt database admin passord (min 8 tegn): " DB_PASSWORD
echo ""
if [ ${#DB_PASSWORD} -lt 8 ]; then
    print_error "Passord m√• v√¶re minst 8 tegn!"
    exit 1
fi

echo ""
echo "Steg 3: Oppretter konfigurasjonsfiler..."
echo ""

# Opprett terraform.tfvars fra template
cat > environments/dev/terraform.tfvars <<EOF
# Generated by setup script on $(date)

# Azure Configuration
subscription_id      = "$SUBSCRIPTION_ID"
resource_group_name  = "$RG_NAME"
location             = "$LOCATION"

# Existing Resources
key_vault_name = "$KV_NAME"

# Project Configuration
project_name = "$PROJECT_NAME"
environment  = "dev"

tags = {
  Owner      = "$USER"
  Course     = "Infrastructure as Code"
  CreatedBy  = "setup-script"
}

# Networking Configuration
vnet_address_space  = ["10.0.0.0/16"]
app_subnet_address  = ["10.0.1.0/24"]
db_subnet_address   = ["10.0.2.0/24"]

# App Service Configuration
app_service_sku     = "B1"
app_runtime_stack   = "node"
app_runtime_version = "18-lts"
health_check_path   = "/"

app_settings = {
  "NODE_ENV" = "production"
}

# Database Configuration
database_sku                  = "B_Standard_B1ms"
database_storage_mb           = 32768
database_version              = "14"
database_name                 = "appdb"
database_admin_username       = "dbadmin"
database_admin_password       = "$DB_PASSWORD"
database_backup_retention_days = 7
database_geo_redundant_backup = false

# Monitoring Configuration
log_retention_days = 30
EOF

print_success "terraform.tfvars opprettet"

# Oppdater backend.tf
cat > environments/dev/backend.tf <<EOF
# Backend Configuration for Terraform State
# Generated by setup script on $(date)

terraform {
  backend "azurerm" {
    resource_group_name  = "$RG_NAME"
    storage_account_name = "$STORAGE_NAME"
    container_name       = "$CONTAINER_NAME"
    key                  = "dev-webapp.tfstate"
    use_oidc             = true
  }
}
EOF

print_success "backend.tf opprettet"

echo ""
echo "Steg 4: Initialiserer Terraform..."
echo ""

cd environments/dev

# Initialize Terraform
if terraform init; then
    print_success "Terraform initialisert"
else
    print_error "Terraform init feilet!"
    exit 1
fi

echo ""
echo "========================================"
echo "Setup fullf√∏rt! üéâ"
echo "========================================"
echo ""
echo "Neste steg:"
echo "1. cd environments/dev"
echo "2. terraform plan       # Se hva som vil bli opprettet"
echo "3. terraform apply      # Deploy infrastrukturen"
echo ""
echo "Viktig:"
echo "- terraform.tfvars inneholder sensitive data - IKKE commit til Git!"
echo "- Backend state lagres i: $STORAGE_NAME/$CONTAINER_NAME"
echo "- Database passord er lagret i terraform.tfvars og vil bli lagret i Key Vault"
echo ""
